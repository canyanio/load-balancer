#!KAMAILIO

# Defined Values
# ==============

#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3

#!define SCANNER_BLACKLIST "sipsak|friendly-scanner|sipvicious|sipcli|sip-scan|sundayddr|iWar|CSipSimple|SIVuS|Gulp|sipv|smap|friendly-request|VaxIPUserAgent|VaxSIPUserAgent|siparmyknife|Test Agent"


# Global Parameters
# =================
children=8

log_facility=LOG_LOCAL0
log_prefix="{$mt $hdr(CSeq) $ci} "

memdbg=5
memlog=5

tcp_accept_no_cl=yes

# LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
sip_warning=1
#!else
debug=2
log_stderror=no
sip_warning=0
#!endif

# Local config file (if it exists)
# ================================
import_file "kamailio-local.cfg"


# Default Values
# ==============
#!ifndef DISPATCHER_ALG
#!define DISPATCHER_ALG "0"
#!endif


#!ifdef LISTEN_ADVERTISE
listen=LISTEN advertise LISTEN_ADVERTISE
#!else
listen=LISTEN
#!endif

#!ifdef ALIAS
alias=ALIAS
#!endif


# Modules Section
# ===============
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "sdpops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"
loadmodule "nathelper.so"
loadmodule "rr.so"
loadmodule "jansson.so"
loadmodule "exec.so"
loadmodule "dispatcher.so"
loadmodule "dialog.so"

#!ifdef WITH_DEBUGGER
loadmodule "debugger.so"
#!endif


# Setting module-specific parameters
# ==================================
# ----- tm params -----
modparam("tm", "failure_reply_mode", 3)
modparam("tm", "fr_timer", 2000)
modparam("tm", "fr_inv_timer", 5000)
modparam("tm", "reparse_on_dns_failover", 0)
modparam("tm", "cancel_b_method", 0)

# ----- dispatcher params -----
modparam("dispatcher", "list_file", "/etc/kamailio/dispatcher.list")
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "force_dst", 1)
modparam("dispatcher", "ds_hash_size", 9)
modparam("dispatcher", "ds_ping_interval", 5)
modparam("dispatcher", "xavp_dst", "_dsdst_")
modparam("dispatcher", "xavp_ctx", "_dsctx_")
modparam("dispatcher", "ds_probing_mode", 0)

#!ifdef WITH_DEBUGGER
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level_name", "exec")
#!endif


# Routing Logic
# =============
request_route {
    # per request initial checks
    route(REQINIT);
    # CANCEL processing
    if (is_method("CANCEL")) {
        if (t_check_trans()) {
            route(RELAY);
        }
        exit;
    }
    # handle retransmissions
    if (!is_method("ACK")) {
        if (t_precheck_trans()) {
            t_check_trans();
            exit;
        }
        t_check_trans();
    }
    # add X-Forwarded-For header with the source ip address
    if (!is_present_hf("X-Forwarded-For")) {
        insert_hf("X-Forwarded-For: $si:$sp\r\n");
    }
    # handle requests within SIP dialogs
    route(WITHINDLG);
    # account only INVITEs
    if (is_method("INVITE")) {
        setflag(FLT_ACC); # do accounting
    }
    # enable dialog management
    if (is_method("INVITE")) {
      dlg_manage();
    }
    # relay the messages
    route(DISPATCH);
}


# Per SIP request initial checks
route[REQINIT] {
    if ($ua =~ SCANNER_BLACKLIST) {
        # silent drop for scanners - uncomment next line if want to reply
        # sl_send_reply("200", "OK");
        exit;
    }
    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }
    if (is_method("OPTIONS") && uri==myself && $rU==$null) {
        sl_send_reply("200","Keepalive");
        exit;
    }
    if (!sanity_check("17895", "7")) {
        xlog("Malformed SIP message from $si:$sp\n");
        exit;
    }
}


# Handle requests within SIP dialogs
route[WITHINDLG] {
    if (!has_totag()) return;
    # sequential request withing a dialog should
    # take the path determined by record-routing
    if (is_method("ACK")) {
        if (t_check_trans()) {
            # no loose-route, but stateful ACK;
            # must be an ACK after a 487
            # or e.g. 404 from upstream server
            route(RELAY);
            exit;
        } else {
            # ACK without matching transaction ... ignore and discard
            exit;
        }
    }
    sl_send_reply("404","Not here");
    exit;
}


# Dispatch requests
route[DISPATCH] {
    # We have X-Auth headers
    if (is_present_hf("X-Auth-Username")) {
        $avp(auser) = $hdr(X-Auth-Username);
        $avp(apass) = $hdr(X-Auth-Password);
        $avp(arealm) = $hdr(X-Auth-Realm);
        remove_hf("X-Auth-Username");
        remove_hf("X-Auth-Password");
        remove_hf("X-Auth-Realm");
    }
    # We already have an X-Destination-URI header
    if (is_present_hf("X-Destination-URI")) {
        $du = $hdr(X-Destination-URI);
        remove_hf("X-Destination-URI");
        route(RELAY);
        exit;
    }
	# hash over callid dispatching on gateways group '1', up to two results
	if (!ds_select_dst("1", DISPATCHER_ALG, "2")) {
		send_reply("404", "No destination");
		exit;
	}
    # we've got more than one result, we can store the failover router in a dlg_var
    if ($xavp(_dsctx_=>cnt) >= 2) {
        $dlg_var(du_primary) = $xavp(_dsdst_[0]=>uri);
        $dlg_var(du_secondary) = $xavp(_dsdst_[1]=>uri);
    }
	route(RELAY);
	exit;
}


# Wrapper for relaying requests
route[RELAY] {
    # enable additional event routes for forwarded requests
    # - serial forking, RTP relaying handling, a.s.o.
    if (is_method("INVITE|BYE|UPDATE|CANCEL|ACK")) {
        dlg_manage();
    }
    if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
        if (!t_is_set("branch_route")) {
            t_on_branch("MANAGE_BRANCH");
        }
    }
    if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
        if (!t_is_set("onreply_route")) {
            t_on_reply("MANAGE_REPLY");
        }
    }
    if (!t_is_set("failure_route")) {
        t_on_failure("MANAGE_FAILURE");
    }
    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}

# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
    xdbg("new branch [$T_branch_idx] to $ru\n");
}


# Manage incoming replies
onreply_route[MANAGE_REPLY] {
    xdbg("incoming reply\n");
}


# Manage failure routing cases
failure_route[MANAGE_FAILURE] {
    if (t_is_canceled()) {
        exit;
    }
    if (t_check_status("401|407")) {
        t_relay();
        exit;
    }
    # next destination - only for 500 or local timeout
	if (t_check_status("500") or (t_branch_timeout() and !t_branch_replied())) {
		if (ds_next_dst()) {
			route(RELAY);
			exit;
		} else if (defined $dlg_var(du_secondary) && !strempty($dlg_var(du_secondary))) {
            # relay the packet to the secondary router
            $du = $dlg_var(du_secondary);
            $dlg_var(du_secondary) = "";
			route(RELAY);
			exit;
        }
	}
}
